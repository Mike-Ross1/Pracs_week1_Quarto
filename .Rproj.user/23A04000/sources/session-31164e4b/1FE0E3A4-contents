---
title: "Practical Two"
format: html
---

## Question 1

Seed set to 1 and x and y variables created.

```{r}
set.seed(1)

x = seq(from = 1, to = 100, by = 1)
y = sin(x/10) + rnorm(length(x), mean = 0, sd = 0.2)
```

## Question 2

Creating the custom lowess function.

```{r}
customLowess <- function(x, y, f) {
  n = length(x)
  k = ceiling(f * n)  
  y_smoothed = numeric(n)
  
  for (i in 1:n) {
    
    k_dist = abs(x - x[i])
    sorted_index = order(k_dist)
    closest_neighbors = sorted_index[1:k]
    
    max_dist = max(k_dist[closest_neighbors])
    
    wj = (1 - (k_dist[closest_neighbors] / max_dist)^3)^3
    wj[k_dist[closest_neighbors] >= max_dist] = 0
    
    X = cbind(1, x[closest_neighbors])
    W = diag(wj)
    Y = y[closest_neighbors]
    
    beta = solve(t(X) %*% W %*% X) %*% t(X) %*% W %*% Y
    
    y_smoothed[i] = beta[1] + beta[2] * x[i]
  }
  
  return(y_smoothed)
}


```

## Question 3

As seen in the plot below, the customLowess() function and the buil-in lowess() function return the same smoothed values

```{r}
y_customLowess = customLowess(x, y, 0.2)
y_builtinLowess = lowess(x, y, f = 0.2, iter = 0)

plot(x, y, main = "Custom LOWESS vs Built-in LOWESS", xlab = "X", ylab = "Y")
lines(x, y_customLowess, col = "blue")
lines(y_builtinLowess$x, y_builtinLowess$y, col = "red", lty = 2)
legend("topright", legend = c("Custom LOWESS", "Built-in LOWESS"), 
       col = c("blue", "red"), lty = c(1,2))
```
